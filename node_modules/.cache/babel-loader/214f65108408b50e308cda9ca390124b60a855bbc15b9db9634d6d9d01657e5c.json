{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonza\\\\Desktop\\\\WarcraftLog Parser\\\\warcraft-logs-viewer\\\\Warcraft-Parse-Analyzer\\\\src\\\\WarcraftLogsReport.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './components/ui/card';\nimport { Input } from './components/ui/input';\nimport { Button } from './components/ui/button';\nimport { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from './components/ui/table';\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\nimport { Badge } from './components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Separator } from './components/ui/separator';\nimport { Skeleton } from './components/ui/skeleton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WarcraftLogsReport = () => {\n  _s();\n  const [reportCode, setReportCode] = useState('GNyJ29dVMhBTRnY3');\n  const apiKey = '122f2d0f15365c7c36b5b04fe99800e7';\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [fightParses, setFightParses] = useState({});\n  const [selectedFight, setSelectedFight] = useState(null);\n  const [reportTitle, setReportTitle] = useState('');\n  const [targetZone, setTargetZone] = useState('Liberation of Undermine');\n  const fetchReport = async () => {\n    setLoading(true);\n    setError(null);\n    setFightParses({});\n    setPlayers([]);\n    try {\n      // Fetch report data\n      const reportUrl = `https://www.warcraftlogs.com/v1/report/fights/${reportCode}?api_key=${apiKey}`;\n      const reportResponse = await fetch(reportUrl);\n      if (!reportResponse.ok) {\n        throw new Error(`HTTP error while fetching report: ${reportResponse.status}`);\n      }\n      const reportJson = await reportResponse.json();\n      setReportTitle(reportJson.title || 'Warcraft Logs Report');\n\n      // Filter fights to only include those from the target zone\n      const raidFights = reportJson.fights.filter(fight => fight.zoneName === targetZone && fight.boss !== 0);\n      if (raidFights.length === 0) {\n        throw new Error(`No boss fights found in ${targetZone}. Please check the report.`);\n      }\n\n      // Get players who participated in at least one raid fight\n      const raidFightIds = new Set(raidFights.map(fight => fight.id));\n      const raidParticipants = [];\n      (reportJson.friendlies || []).forEach(friendly => {\n        // Check if this player participated in any raid fight\n        const participatedInRaid = friendly.fights.some(fight => raidFightIds.has(fight.id));\n        if (participatedInRaid) {\n          var _friendly$icon;\n          raidParticipants.push({\n            id: friendly.id,\n            name: friendly.name,\n            server: friendly.server,\n            region: friendly.region,\n            class: friendly.type,\n            spec: ((_friendly$icon = friendly.icon) === null || _friendly$icon === void 0 ? void 0 : _friendly$icon.split('-')[1]) || friendly.type\n          });\n        }\n      });\n      setPlayers(raidParticipants);\n      if (raidParticipants.length === 0) {\n        throw new Error(\"No valid players found for raid fights.\");\n      }\n\n      // Fetch parses for all raid participants\n      const fetchParsesForPlayer = async player => {\n        var _raidFights$;\n        if (!player || !player.name || !player.server || !player.region) {\n          console.warn(`Missing player data for: ${(player === null || player === void 0 ? void 0 : player.name) || 'Unknown'}`);\n          return [];\n        }\n        const {\n          name,\n          server,\n          region\n        } = player;\n\n        // Fetch parses specifically for this zone\n        const zoneId = (_raidFights$ = raidFights[0]) === null || _raidFights$ === void 0 ? void 0 : _raidFights$.zoneID; // Get zone ID from the first raid fight\n\n        if (!zoneId) {\n          console.warn(`Missing zone ID for ${name}`);\n          return [];\n        }\n        const url = `https://www.warcraftlogs.com/v1/parses/character/${name}/${server}/${region}?zone=${zoneId}&api_key=${apiKey}`;\n        try {\n          const res = await fetch(url);\n          if (!res.ok) {\n            console.warn(`HTTP error for ${name}: ${res.status}`);\n            return [];\n          }\n          const data = await res.json();\n          return data.map(parse => ({\n            ...parse,\n            playerName: name,\n            class: parse.class || player.class,\n            // Use player class if not in parse\n            spec: parse.spec || player.spec // Use player spec if not in parse\n          }));\n        } catch (err) {\n          console.warn(`Error fetching parses for ${name}:`, err);\n          return [];\n        }\n      };\n\n      // Use Promise.all to fetch parses for all players in parallel\n      const allPlayersParsesArrays = await Promise.all(raidParticipants.map(fetchParsesForPlayer));\n      const allParses = allPlayersParsesArrays.flat();\n\n      // Group parses by fight and ensure all players appear in parse data\n      const fightPlayerParses = {};\n      raidFights.forEach(fight => {\n        if (fight.boss && fight.boss !== 0) {\n          const fightId = fight.id;\n          const encounterName = fight.name;\n          const bossId = fight.boss;\n\n          // Find all players who participated in this fight\n          const playersInFight = players.filter(player => {\n            const friendly = reportJson.friendlies.find(f => f.id === player.id);\n            return friendly && friendly.fights.some(f => f.id === fightId);\n          });\n\n          // Find matching parses from API data\n          let parsesForThisFight = allParses.filter(parse => parse.encounterID === bossId ||\n          // Match by boss ID\n          parse.reportID === reportCode && parse.fightID === fightId // Match by report ID and fight ID\n          );\n\n          // Create parse objects for all players, using API data when available\n          const playerParseObjects = [];\n\n          // Add players with parses\n          playersInFight.forEach(player => {\n            // Find parse for this player and encounter\n            const playerParse = parsesForThisFight.find(parse => parse.playerName === player.name);\n            if (playerParse) {\n              playerParseObjects.push({\n                playerName: player.name,\n                percentile: Math.floor(playerParse.percentile || 0),\n                spec: playerParse.spec || player.spec,\n                class: playerParse.class || player.class\n              });\n            } else {\n              // If no parse available, add player with default values\n              playerParseObjects.push({\n                playerName: player.name,\n                percentile: 0,\n                // No parse available\n                spec: player.spec,\n                class: player.class\n              });\n            }\n          });\n\n          // Sort by percentile\n          playerParseObjects.sort((a, b) => b.percentile - a.percentile);\n          const fightName = encounterName || `Boss Fight ${fightId}`;\n          fightPlayerParses[fightName] = {\n            parses: playerParseObjects,\n            fightId: fightId,\n            fightDetails: fight\n          };\n        }\n      });\n      setFightParses(fightPlayerParses);\n\n      // Set the first fight as selected by default if there are fights\n      const fightNames = Object.keys(fightPlayerParses);\n      if (fightNames.length > 0) {\n        setSelectedFight(fightNames[0]);\n      }\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error fetching report:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get class color\n  const getClassColor = className => {\n    const classColors = {\n      'DeathKnight': '#C41E3A',\n      'DemonHunter': '#A330C9',\n      'Druid': '#FF7C0A',\n      'Hunter': '#AAD372',\n      'Mage': '#3FC7EB',\n      'Monk': '#00FF98',\n      'Paladin': '#F48CBA',\n      'Priest': '#FFFFFF',\n      'Rogue': '#FFF468',\n      'Shaman': '#0070DD',\n      'Warlock': '#8788EE',\n      'Warrior': '#C69B6D',\n      'Evoker': '#33937F',\n      'NPC': '#999999',\n      'Pet': '#999999'\n    };\n    return classColors[className] || '#888888';\n  };\n\n  // Get percentile badge variant\n  const getPercentileBadgeVariant = percentile => {\n    if (percentile >= 95) return 'destructive'; // Legendary\n    if (percentile >= 75) return 'outline'; // Epic\n    if (percentile >= 50) return 'secondary'; // Rare\n    if (percentile >= 25) return 'default'; // Uncommon\n    return 'secondary'; // Common\n  };\n\n  // Format time in seconds to MM:SS\n  const formatTime = timeInMs => {\n    if (!timeInMs || isNaN(timeInMs)) return '00:00';\n    const seconds = Math.floor(timeInMs / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate player averages across all fights\n  const calculatePlayerAverages = () => {\n    if (Object.keys(fightParses).length === 0) return [];\n\n    // Collect all parse entries for each player\n    const playerParses = {};\n    Object.values(fightParses).forEach(fight => {\n      fight.parses.forEach(parse => {\n        if (!playerParses[parse.playerName]) {\n          playerParses[parse.playerName] = {\n            playerName: parse.playerName,\n            class: parse.class,\n            spec: parse.spec,\n            // Will use the most recent spec\n            parses: []\n          };\n        }\n        if (parse.percentile > 0) {\n          // Only include actual parses, not N/A values\n          playerParses[parse.playerName].parses.push(parse.percentile);\n        }\n      });\n    });\n\n    // Calculate averages for each player\n    const playerAverages = Object.values(playerParses).map(player => {\n      const average = player.parses.length > 0 ? player.parses.reduce((sum, val) => sum + val, 0) / player.parses.length : 0;\n      return {\n        ...player,\n        averagePercentile: Math.round(average),\n        totalParses: player.parses.length\n      };\n    });\n\n    // Sort by average percentile (highest first)\n    return playerAverages.sort((a, b) => b.averagePercentile - a.averagePercentile);\n  };\n  const playerAverages = calculatePlayerAverages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 max-w-4xl\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Warcraft Logs Raid Report Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: [\"Enter your report code to view player performance in \", targetZone]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            value: reportCode,\n            onChange: e => setReportCode(e.target.value),\n            placeholder: \"Report Code\",\n            className: \"sm:flex-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: fetchReport,\n            disabled: loading,\n            children: loading ? 'Loading...' : 'Fetch Report Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"destructive\",\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Loading Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), reportTitle && players.length > 0 && !loading && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: reportTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: [\"Raid Composition (\", players.length, \" players)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\",\n          children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2 bg-muted rounded flex flex-col\",\n            style: {\n              borderLeft: `4px solid ${getClassColor(player.class)}`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-medium\",\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-muted-foreground\",\n              children: [player.spec, \" \", player.class]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-muted-foreground\",\n              children: [player.server, \" (\", player.region, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }, this), Object.keys(fightParses).length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: [targetZone, \" Boss Fights\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          defaultValue: selectedFight,\n          onValueChange: setSelectedFight,\n          children: [/*#__PURE__*/_jsxDEV(TabsList, {\n            className: \"mb-4 flex flex-wrap h-auto\",\n            children: Object.keys(fightParses).map(fightName => /*#__PURE__*/_jsxDEV(TabsTrigger, {\n              value: fightName,\n              className: \"mb-1\",\n              children: fightName\n            }, fightName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this), Object.keys(fightParses).map(fightName => /*#__PURE__*/_jsxDEV(TabsContent, {\n            value: fightName,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-between flex-wrap\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-lg font-bold\",\n                  children: [fightName, \" Performance\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 23\n                }, this), fightParses[fightName].fightDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-muted-foreground\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Fight ID: \", fightParses[fightName].fightId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ml-4\",\n                    children: [\"Duration: \", formatTime(fightParses[fightName].fightDetails.end - fightParses[fightName].fightDetails.start), fightParses[fightName].fightDetails.kill && /*#__PURE__*/_jsxDEV(Badge, {\n                      variant: \"outline\",\n                      className: \"ml-2 bg-green-500/10\",\n                      children: \"Kill\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 403,\n                      columnNumber: 31\n                    }, this), !fightParses[fightName].fightDetails.kill && /*#__PURE__*/_jsxDEV(Badge, {\n                      variant: \"outline\",\n                      className: \"ml-2 bg-red-500/10\",\n                      children: \"Wipe\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Separator, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 21\n              }, this), fightParses[fightName].parses.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n                children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n                  children: /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Rank\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Player\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Spec\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Percentile\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                  children: fightParses[fightName].parses.map((parse, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      children: index + 1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 428,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: getClassColor(parse.class)\n                        },\n                        children: parse.playerName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 430,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 429,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: parse.spec\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 434,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: parse.percentile > 0 ? /*#__PURE__*/_jsxDEV(Badge, {\n                        variant: getPercentileBadgeVariant(parse.percentile),\n                        children: parse.percentile\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 437,\n                        columnNumber: 35\n                      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-gray-400\",\n                        children: \"N/A\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 441,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 31\n                    }, this)]\n                  }, `${parse.playerName}-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-4 bg-muted rounded text-center\",\n                children: \"No parse data found for this fight.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this)\n          }, fightName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), playerAverages.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Player Average Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: \"Average parse percentiles across all fights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Rank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Player\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Class/Spec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Avg. Percentile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Fights\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: playerAverages.map((player, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: getClassColor(player.class)\n                  },\n                  children: player.playerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [player.spec, \" \", player.class]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: player.averagePercentile > 0 ? /*#__PURE__*/_jsxDEV(Badge, {\n                  variant: getPercentileBadgeVariant(player.averagePercentile),\n                  children: player.averagePercentile\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-400\",\n                  children: \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: player.totalParses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 21\n              }, this)]\n            }, player.playerName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(WarcraftLogsReport, \"7ylP8gNve1zo2Pe8KZLiSrG5Y4k=\");\n_c = WarcraftLogsReport;\nexport default WarcraftLogsReport;\nvar _c;\n$RefreshReg$(_c, \"WarcraftLogsReport\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","CardHeader","CardTitle","CardDescription","Input","Button","Table","TableBody","TableCaption","TableCell","TableHead","TableHeader","TableRow","Alert","AlertDescription","AlertTitle","Badge","Tabs","TabsContent","TabsList","TabsTrigger","Separator","Skeleton","jsxDEV","_jsxDEV","WarcraftLogsReport","_s","reportCode","setReportCode","apiKey","loading","setLoading","error","setError","players","setPlayers","fightParses","setFightParses","selectedFight","setSelectedFight","reportTitle","setReportTitle","targetZone","setTargetZone","fetchReport","reportUrl","reportResponse","fetch","ok","Error","status","reportJson","json","title","raidFights","fights","filter","fight","zoneName","boss","length","raidFightIds","Set","map","id","raidParticipants","friendlies","forEach","friendly","participatedInRaid","some","has","_friendly$icon","push","name","server","region","class","type","spec","icon","split","fetchParsesForPlayer","player","_raidFights$","console","warn","zoneId","zoneID","url","res","data","parse","playerName","err","allPlayersParsesArrays","Promise","all","allParses","flat","fightPlayerParses","fightId","encounterName","bossId","playersInFight","find","f","parsesForThisFight","encounterID","reportID","fightID","playerParseObjects","playerParse","percentile","Math","floor","sort","a","b","fightName","parses","fightDetails","fightNames","Object","keys","message","getClassColor","className","classColors","getPercentileBadgeVariant","formatTime","timeInMs","isNaN","seconds","minutes","remainingSeconds","toString","padStart","calculatePlayerAverages","playerParses","values","playerAverages","average","reduce","sum","val","averagePercentile","round","totalParses","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","variant","style","borderLeft","defaultValue","onValueChange","end","start","kill","index","color","_c","$RefreshReg$"],"sources":["C:/Users/gonza/Desktop/WarcraftLog Parser/warcraft-logs-viewer/Warcraft-Parse-Analyzer/src/WarcraftLogsReport.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle, \r\n  CardDescription \r\n} from './components/ui/card';\r\nimport { Input } from './components/ui/input';\r\nimport { Button } from './components/ui/button';\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCaption, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from './components/ui/table';\r\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\r\nimport { Badge } from './components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\r\nimport { Separator } from './components/ui/separator';\r\nimport { Skeleton } from './components/ui/skeleton';\r\n\r\nconst WarcraftLogsReport = () => {\r\n  const [reportCode, setReportCode] = useState('GNyJ29dVMhBTRnY3');\r\n  const apiKey = '122f2d0f15365c7c36b5b04fe99800e7';\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [fightParses, setFightParses] = useState({});\r\n  const [selectedFight, setSelectedFight] = useState(null);\r\n  const [reportTitle, setReportTitle] = useState('');\r\n  const [targetZone, setTargetZone] = useState('Liberation of Undermine');\r\n\r\n  const fetchReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setFightParses({});\r\n    setPlayers([]);\r\n    \r\n    try {\r\n      // Fetch report data\r\n      const reportUrl = `https://www.warcraftlogs.com/v1/report/fights/${reportCode}?api_key=${apiKey}`;\r\n      const reportResponse = await fetch(reportUrl);\r\n      \r\n      if (!reportResponse.ok) {\r\n        throw new Error(`HTTP error while fetching report: ${reportResponse.status}`);\r\n      }\r\n      \r\n      const reportJson = await reportResponse.json();\r\n      setReportTitle(reportJson.title || 'Warcraft Logs Report');\r\n      \r\n      // Filter fights to only include those from the target zone\r\n      const raidFights = reportJson.fights.filter(fight => \r\n        fight.zoneName === targetZone && fight.boss !== 0\r\n      );\r\n      \r\n      if (raidFights.length === 0) {\r\n        throw new Error(`No boss fights found in ${targetZone}. Please check the report.`);\r\n      }\r\n      \r\n      // Get players who participated in at least one raid fight\r\n      const raidFightIds = new Set(raidFights.map(fight => fight.id));\r\n      const raidParticipants = [];\r\n      \r\n      (reportJson.friendlies || []).forEach(friendly => {\r\n        // Check if this player participated in any raid fight\r\n        const participatedInRaid = friendly.fights.some(fight => \r\n          raidFightIds.has(fight.id)\r\n        );\r\n        \r\n        if (participatedInRaid) {\r\n          raidParticipants.push({\r\n            id: friendly.id,\r\n            name: friendly.name,\r\n            server: friendly.server,\r\n            region: friendly.region,\r\n            class: friendly.type,\r\n            spec: friendly.icon?.split('-')[1] || friendly.type\r\n          });\r\n        }\r\n      });\r\n      \r\n      setPlayers(raidParticipants);\r\n      \r\n      if (raidParticipants.length === 0) {\r\n        throw new Error(\"No valid players found for raid fights.\");\r\n      }\r\n      \r\n      // Fetch parses for all raid participants\r\n      const fetchParsesForPlayer = async (player) => {\r\n        if (!player || !player.name || !player.server || !player.region) {\r\n          console.warn(`Missing player data for: ${player?.name || 'Unknown'}`);\r\n          return [];\r\n        }\r\n        \r\n        const { name, server, region } = player;\r\n        \r\n        // Fetch parses specifically for this zone\r\n        const zoneId = raidFights[0]?.zoneID; // Get zone ID from the first raid fight\r\n        \r\n        if (!zoneId) {\r\n          console.warn(`Missing zone ID for ${name}`);\r\n          return [];\r\n        }\r\n        \r\n        const url = `https://www.warcraftlogs.com/v1/parses/character/${name}/${server}/${region}?zone=${zoneId}&api_key=${apiKey}`;\r\n        \r\n        try {\r\n          const res = await fetch(url);\r\n          \r\n          if (!res.ok) {\r\n            console.warn(`HTTP error for ${name}: ${res.status}`);\r\n            return [];\r\n          }\r\n          \r\n          const data = await res.json();\r\n          return data.map(parse => ({ \r\n            ...parse, \r\n            playerName: name,\r\n            class: parse.class || player.class, // Use player class if not in parse\r\n            spec: parse.spec || player.spec     // Use player spec if not in parse\r\n          }));\r\n        } catch (err) {\r\n          console.warn(`Error fetching parses for ${name}:`, err);\r\n          return [];\r\n        }\r\n      };\r\n      \r\n      // Use Promise.all to fetch parses for all players in parallel\r\n      const allPlayersParsesArrays = await Promise.all(\r\n        raidParticipants.map(fetchParsesForPlayer)\r\n      );\r\n      const allParses = allPlayersParsesArrays.flat();\r\n      \r\n      // Group parses by fight and ensure all players appear in parse data\r\n      const fightPlayerParses = {};\r\n      \r\n      raidFights.forEach(fight => {\r\n        if (fight.boss && fight.boss !== 0) {\r\n          const fightId = fight.id;\r\n          const encounterName = fight.name;\r\n          const bossId = fight.boss;\r\n          \r\n          // Find all players who participated in this fight\r\n          const playersInFight = players.filter(player => {\r\n            const friendly = reportJson.friendlies.find(f => f.id === player.id);\r\n            return friendly && friendly.fights.some(f => f.id === fightId);\r\n          });\r\n          \r\n          // Find matching parses from API data\r\n          let parsesForThisFight = allParses.filter(parse => \r\n            parse.encounterID === bossId || // Match by boss ID\r\n            (parse.reportID === reportCode && parse.fightID === fightId) // Match by report ID and fight ID\r\n          );\r\n          \r\n          // Create parse objects for all players, using API data when available\r\n          const playerParseObjects = [];\r\n          \r\n          // Add players with parses\r\n          playersInFight.forEach(player => {\r\n            // Find parse for this player and encounter\r\n            const playerParse = parsesForThisFight.find(parse => \r\n              parse.playerName === player.name\r\n            );\r\n            \r\n            if (playerParse) {\r\n              playerParseObjects.push({\r\n                playerName: player.name,\r\n                percentile: Math.floor(playerParse.percentile || 0),\r\n                spec: playerParse.spec || player.spec,\r\n                class: playerParse.class || player.class\r\n              });\r\n            } else {\r\n              // If no parse available, add player with default values\r\n              playerParseObjects.push({\r\n                playerName: player.name,\r\n                percentile: 0, // No parse available\r\n                spec: player.spec,\r\n                class: player.class\r\n              });\r\n            }\r\n          });\r\n          \r\n          // Sort by percentile\r\n          playerParseObjects.sort((a, b) => b.percentile - a.percentile);\r\n          \r\n          const fightName = encounterName || `Boss Fight ${fightId}`;\r\n          fightPlayerParses[fightName] = {\r\n            parses: playerParseObjects,\r\n            fightId: fightId,\r\n            fightDetails: fight\r\n          };\r\n        }\r\n      });\r\n      \r\n      setFightParses(fightPlayerParses);\r\n      \r\n      // Set the first fight as selected by default if there are fights\r\n      const fightNames = Object.keys(fightPlayerParses);\r\n      if (fightNames.length > 0) {\r\n        setSelectedFight(fightNames[0]);\r\n      }\r\n      \r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(\"Error fetching report:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get class color\r\n  const getClassColor = (className) => {\r\n    const classColors = {\r\n      'DeathKnight': '#C41E3A',\r\n      'DemonHunter': '#A330C9',\r\n      'Druid': '#FF7C0A',\r\n      'Hunter': '#AAD372',\r\n      'Mage': '#3FC7EB',\r\n      'Monk': '#00FF98',\r\n      'Paladin': '#F48CBA',\r\n      'Priest': '#FFFFFF',\r\n      'Rogue': '#FFF468',\r\n      'Shaman': '#0070DD',\r\n      'Warlock': '#8788EE',\r\n      'Warrior': '#C69B6D',\r\n      'Evoker': '#33937F',\r\n      'NPC': '#999999',\r\n      'Pet': '#999999'\r\n    };\r\n    \r\n    return classColors[className] || '#888888';\r\n  };\r\n\r\n  // Get percentile badge variant\r\n  const getPercentileBadgeVariant = (percentile) => {\r\n    if (percentile >= 95) return 'destructive'; // Legendary\r\n    if (percentile >= 75) return 'outline';     // Epic\r\n    if (percentile >= 50) return 'secondary';   // Rare\r\n    if (percentile >= 25) return 'default';     // Uncommon\r\n    return 'secondary';                         // Common\r\n  };\r\n\r\n  // Format time in seconds to MM:SS\r\n  const formatTime = (timeInMs) => {\r\n    if (!timeInMs || isNaN(timeInMs)) return '00:00';\r\n    \r\n    const seconds = Math.floor(timeInMs / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Calculate player averages across all fights\r\n  const calculatePlayerAverages = () => {\r\n    if (Object.keys(fightParses).length === 0) return [];\r\n    \r\n    // Collect all parse entries for each player\r\n    const playerParses = {};\r\n    \r\n    Object.values(fightParses).forEach(fight => {\r\n      fight.parses.forEach(parse => {\r\n        if (!playerParses[parse.playerName]) {\r\n          playerParses[parse.playerName] = {\r\n            playerName: parse.playerName,\r\n            class: parse.class,\r\n            spec: parse.spec, // Will use the most recent spec\r\n            parses: []\r\n          };\r\n        }\r\n        \r\n        if (parse.percentile > 0) { // Only include actual parses, not N/A values\r\n          playerParses[parse.playerName].parses.push(parse.percentile);\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Calculate averages for each player\r\n    const playerAverages = Object.values(playerParses).map(player => {\r\n      const average = player.parses.length > 0 \r\n        ? player.parses.reduce((sum, val) => sum + val, 0) / player.parses.length\r\n        : 0;\r\n        \r\n      return {\r\n        ...player,\r\n        averagePercentile: Math.round(average),\r\n        totalParses: player.parses.length\r\n      };\r\n    });\r\n    \r\n    // Sort by average percentile (highest first)\r\n    return playerAverages.sort((a, b) => b.averagePercentile - a.averagePercentile);\r\n  };\r\n\r\n  const playerAverages = calculatePlayerAverages();\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4 max-w-4xl\">\r\n      <Card className=\"mb-6\">\r\n        <CardHeader>\r\n          <CardTitle>Warcraft Logs Raid Report Viewer</CardTitle>\r\n          <CardDescription>\r\n            Enter your report code to view player performance in {targetZone}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2\">\r\n            <Input\r\n              value={reportCode}\r\n              onChange={(e) => setReportCode(e.target.value)}\r\n              placeholder=\"Report Code\"\r\n              className=\"sm:flex-1\"\r\n            />\r\n            <Button onClick={fetchReport} disabled={loading}>\r\n              {loading ? 'Loading...' : 'Fetch Report Data'}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      \r\n      {error && (\r\n        <Alert variant=\"destructive\" className=\"mb-6\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          <AlertDescription>{error}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n      \r\n      {loading && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>Loading Data</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {reportTitle && players.length > 0 && !loading && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>{reportTitle}</CardTitle>\r\n            <CardDescription>Raid Composition ({players.length} players)</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\r\n              {players.map(player => (\r\n                <div \r\n                  key={player.id} \r\n                  className=\"p-2 bg-muted rounded flex flex-col\"\r\n                  style={{ borderLeft: `4px solid ${getClassColor(player.class)}` }}\r\n                >\r\n                  <div className=\"font-medium\">{player.name}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {player.spec} {player.class}\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {player.server} ({player.region})\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {Object.keys(fightParses).length > 0 && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>{targetZone} Boss Fights</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Tabs defaultValue={selectedFight} onValueChange={setSelectedFight}>\r\n              <TabsList className=\"mb-4 flex flex-wrap h-auto\">\r\n                {Object.keys(fightParses).map(fightName => (\r\n                  <TabsTrigger key={fightName} value={fightName} className=\"mb-1\">\r\n                    {fightName}\r\n                  </TabsTrigger>\r\n                ))}\r\n              </TabsList>\r\n              \r\n              {Object.keys(fightParses).map(fightName => (\r\n                <TabsContent key={fightName} value={fightName}>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between flex-wrap\">\r\n                      <h3 className=\"text-lg font-bold\">{fightName} Performance</h3>\r\n                      {fightParses[fightName].fightDetails && (\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          <span>Fight ID: {fightParses[fightName].fightId}</span>\r\n                          <span className=\"ml-4\">\r\n                            Duration: {formatTime(\r\n                              fightParses[fightName].fightDetails.end - \r\n                              fightParses[fightName].fightDetails.start\r\n                            )}\r\n                            {fightParses[fightName].fightDetails.kill && \r\n                              <Badge variant=\"outline\" className=\"ml-2 bg-green-500/10\">Kill</Badge>\r\n                            }\r\n                            {!fightParses[fightName].fightDetails.kill && \r\n                              <Badge variant=\"outline\" className=\"ml-2 bg-red-500/10\">Wipe</Badge>\r\n                            }\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <Separator />\r\n                    \r\n                    {fightParses[fightName].parses.length > 0 ? (\r\n                      <Table>\r\n                        <TableHeader>\r\n                          <TableRow>\r\n                            <TableHead>Rank</TableHead>\r\n                            <TableHead>Player</TableHead>\r\n                            <TableHead>Spec</TableHead>\r\n                            <TableHead>Percentile</TableHead>\r\n                          </TableRow>\r\n                        </TableHeader>\r\n                        <TableBody>\r\n                          {fightParses[fightName].parses.map((parse, index) => (\r\n                            <TableRow key={`${parse.playerName}-${index}`}>\r\n                              <TableCell>{index + 1}</TableCell>\r\n                              <TableCell>\r\n                                <span style={{ color: getClassColor(parse.class) }}>\r\n                                  {parse.playerName}\r\n                                </span>\r\n                              </TableCell>\r\n                              <TableCell>{parse.spec}</TableCell>\r\n                              <TableCell>\r\n                                {parse.percentile > 0 ? (\r\n                                  <Badge variant={getPercentileBadgeVariant(parse.percentile)}>\r\n                                    {parse.percentile}\r\n                                  </Badge>\r\n                                ) : (\r\n                                  <span className=\"text-gray-400\">N/A</span>\r\n                                )}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    ) : (\r\n                      <div className=\"p-4 bg-muted rounded text-center\">\r\n                        No parse data found for this fight.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </TabsContent>\r\n              ))}\r\n            </Tabs>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {playerAverages.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Player Average Performance</CardTitle>\r\n            <CardDescription>Average parse percentiles across all fights</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Rank</TableHead>\r\n                  <TableHead>Player</TableHead>\r\n                  <TableHead>Class/Spec</TableHead>\r\n                  <TableHead>Avg. Percentile</TableHead>\r\n                  <TableHead>Fights</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {playerAverages.map((player, index) => (\r\n                  <TableRow key={player.playerName}>\r\n                    <TableCell>{index + 1}</TableCell>\r\n                    <TableCell>\r\n                      <span style={{ color: getClassColor(player.class) }}>\r\n                        {player.playerName}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>{player.spec} {player.class}</TableCell>\r\n                    <TableCell>\r\n                      {player.averagePercentile > 0 ? (\r\n                        <Badge variant={getPercentileBadgeVariant(player.averagePercentile)}>\r\n                          {player.averagePercentile}\r\n                        </Badge>\r\n                      ) : (\r\n                        <span className=\"text-gray-400\">N/A</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>{player.totalParses}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WarcraftLogsReport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}