{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonza\\\\Desktop\\\\WarcraftLog Parser\\\\warcraft-logs-viewer\\\\Warcraft-Parse-Analyzer\\\\src\\\\WarcraftLogsReport.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './components/ui/card';\nimport { Input } from './components/ui/input';\nimport { Button } from './components/ui/button';\nimport { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from './components/ui/table';\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\nimport { Badge } from './components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Separator } from './components/ui/separator';\nimport { Skeleton } from './components/ui/skeleton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WarcraftLogsReport = () => {\n  _s();\n  const [reportCode, setReportCode] = useState('GNyJ29dVMhBTRnY3');\n  const apiKey = '122f2d0f15365c7c36b5b04fe99800e7';\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [fightParses, setFightParses] = useState({});\n  const [selectedFight, setSelectedFight] = useState(null);\n  const [reportTitle, setReportTitle] = useState('');\n  const [targetZone, setTargetZone] = useState('Liberation of Undermine');\n  const fetchReport = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Fetch report data\n      const reportUrl = `https://www.warcraftlogs.com/v1/report/fights/${reportCode}?api_key=${apiKey}`;\n      const reportResponse = await fetch(reportUrl);\n      if (!reportResponse.ok) {\n        throw new Error(`HTTP error while fetching report: ${reportResponse.status}`);\n      }\n      const reportJson = await reportResponse.json();\n      setReportTitle(reportJson.title || 'Warcraft Logs Report');\n\n      // Filter fights to only include those from the target zone\n      const raidFights = reportJson.fights.filter(fight => fight.zoneName === targetZone && fight.boss !== 0);\n\n      // Get players from exported characters with additional class information\n      const exportedPlayers = reportJson.exportedCharacters || [];\n      if (exportedPlayers.length === 0) {\n        throw new Error(\"No players found in exportedCharacters.\");\n      }\n\n      // Enhance player data with class information from friendlies if available\n      const enhancedPlayers = exportedPlayers.map(player => {\n        var _friendly$icon;\n        const friendly = (reportJson.friendlies || []).find(f => f.name === player.name && f.server === player.server);\n        return {\n          ...player,\n          class: (friendly === null || friendly === void 0 ? void 0 : friendly.type) || null,\n          spec: (friendly === null || friendly === void 0 ? void 0 : (_friendly$icon = friendly.icon) === null || _friendly$icon === void 0 ? void 0 : _friendly$icon.split('-')[1]) || null\n        };\n      });\n      setPlayers(enhancedPlayers);\n\n      // Fetch parses for all players\n      const fetchParsesForPlayer = async player => {\n        const {\n          name,\n          server,\n          region\n        } = player;\n        const url = `https://www.warcraftlogs.com/v1/parses/character/${name}/${server}/${region}?api_key=${apiKey}`;\n        const res = await fetch(url);\n        if (!res.ok) {\n          throw new Error(`HTTP error for ${name}: ${res.status}`);\n        }\n        const data = await res.json();\n        return data.map(parse => ({\n          ...parse,\n          playerName: name\n        }));\n      };\n      const allPlayersParsesArrays = await Promise.all(enhancedPlayers.map(fetchParsesForPlayer));\n      const allParses = allPlayersParsesArrays.flat();\n\n      // Group parses by fight\n      const fightPlayerParses = {};\n      (reportJson.fights || []).forEach(fight => {\n        if (fight.boss && fight.boss !== 0 && fight.zoneName === targetZone) {\n          const fightId = fight.id;\n          const matchingParses = allParses.filter(parse => parse.reportID === reportCode && parse.fightID === fightId);\n          const playerParseObjects = matchingParses.map(parse => ({\n            playerName: parse.playerName,\n            percentile: Math.floor(parse.percentile || 0),\n            spec: parse.spec,\n            class: parse.class\n          }));\n          playerParseObjects.sort((a, b) => b.percentile - a.percentile);\n          fightPlayerParses[fight.name || `Fight ${fightId}`] = {\n            parses: playerParseObjects,\n            fightId: fightId,\n            fightDetails: fight\n          };\n        }\n      });\n      setFightParses(fightPlayerParses);\n\n      // Set the first fight as selected by default if there are fights\n      const fightNames = Object.keys(fightPlayerParses);\n      if (fightNames.length > 0) {\n        setSelectedFight(fightNames[0]);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get class color\n  const getClassColor = className => {\n    const classColors = {\n      'DeathKnight': '#C41E3A',\n      'DemonHunter': '#A330C9',\n      'Druid': '#FF7C0A',\n      'Hunter': '#AAD372',\n      'Mage': '#3FC7EB',\n      'Monk': '#00FF98',\n      'Paladin': '#F48CBA',\n      'Priest': '#FFFFFF',\n      'Rogue': '#FFF468',\n      'Shaman': '#0070DD',\n      'Warlock': '#8788EE',\n      'Warrior': '#C69B6D',\n      'Evoker': '#33937F',\n      'NPC': '#999999',\n      'Pet': '#999999'\n    };\n    return classColors[className] || '#888888';\n  };\n\n  // Get percentile badge variant\n  const getPercentileBadgeVariant = percentile => {\n    if (percentile >= 95) return 'destructive'; // Legendary\n    if (percentile >= 75) return 'outline'; // Epic\n    if (percentile >= 50) return 'secondary'; // Rare\n    if (percentile >= 25) return 'default'; // Uncommon\n    return 'secondary'; // Common\n  };\n\n  // Format time in seconds to MM:SS\n  const formatTime = timeInMs => {\n    if (!timeInMs || isNaN(timeInMs)) return '00:00';\n    const seconds = Math.floor(timeInMs / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // Calculate player averages across all fights\n  const calculatePlayerAverages = () => {\n    if (Object.keys(fightParses).length === 0) return [];\n\n    // Collect all parse entries for each player\n    const playerParses = {};\n    Object.values(fightParses).forEach(fight => {\n      fight.parses.forEach(parse => {\n        if (!playerParses[parse.playerName]) {\n          playerParses[parse.playerName] = {\n            playerName: parse.playerName,\n            class: parse.class,\n            spec: parse.spec,\n            // Will use the most recent spec\n            parses: []\n          };\n        }\n        playerParses[parse.playerName].parses.push(parse.percentile);\n      });\n    });\n\n    // Calculate averages for each player\n    const playerAverages = Object.values(playerParses).map(player => {\n      const average = player.parses.reduce((sum, val) => sum + val, 0) / player.parses.length;\n      return {\n        ...player,\n        averagePercentile: Math.round(average),\n        totalParses: player.parses.length\n      };\n    });\n\n    // Sort by average percentile (highest first)\n    return playerAverages.sort((a, b) => b.averagePercentile - a.averagePercentile);\n  };\n  const playerAverages = calculatePlayerAverages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 max-w-4xl\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Warcraft Logs Report Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: [\"Enter your report code to view player performance in \", targetZone]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            value: reportCode,\n            onChange: e => setReportCode(e.target.value),\n            placeholder: \"Report Code\",\n            className: \"sm:flex-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: fetchReport,\n            disabled: loading,\n            children: loading ? 'Loading...' : 'Fetch Report Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"destructive\",\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Loading Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            className: \"h-4 w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this), reportTitle && players.length > 0 && !loading && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: reportTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: [\"Raid Composition (\", players.length, \" players)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\",\n          children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2 bg-muted rounded flex flex-col\",\n            style: {\n              borderLeft: `4px solid ${getClassColor(player.class || 'Unknown')}`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-medium\",\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), player.class && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-muted-foreground\",\n              children: [player.spec, \" \", player.class]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-muted-foreground\",\n              children: [player.server, \" (\", player.region, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), Object.keys(fightParses).length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: [targetZone, \" Boss Fights\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          defaultValue: selectedFight,\n          onValueChange: setSelectedFight,\n          children: [/*#__PURE__*/_jsxDEV(TabsList, {\n            className: \"mb-4 flex flex-wrap h-auto\",\n            children: Object.keys(fightParses).map(fightName => /*#__PURE__*/_jsxDEV(TabsTrigger, {\n              value: fightName,\n              className: \"mb-1\",\n              children: fightName\n            }, fightName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), Object.keys(fightParses).map(fightName => /*#__PURE__*/_jsxDEV(TabsContent, {\n            value: fightName,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-between flex-wrap\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-lg font-bold\",\n                  children: [fightName, \" Performance\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 23\n                }, this), fightParses[fightName].fightDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-muted-foreground\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Fight ID: \", fightParses[fightName].fightId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ml-4\",\n                    children: [\"Duration: \", formatTime(fightParses[fightName].fightDetails.end - fightParses[fightName].fightDetails.start), fightParses[fightName].fightDetails.kill && /*#__PURE__*/_jsxDEV(Badge, {\n                      variant: \"outline\",\n                      className: \"ml-2 bg-green-500/10\",\n                      children: \"Kill\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 320,\n                      columnNumber: 31\n                    }, this), !fightParses[fightName].fightDetails.kill && /*#__PURE__*/_jsxDEV(Badge, {\n                      variant: \"outline\",\n                      className: \"ml-2 bg-red-500/10\",\n                      children: \"Wipe\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Separator, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 21\n              }, this), fightParses[fightName].parses.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n                children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n                  children: /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Rank\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 336,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Player\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 337,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Spec\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                      children: \"Percentile\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                  children: fightParses[fightName].parses.map((parse, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      children: index + 1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 345,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: getClassColor(parse.class)\n                        },\n                        children: parse.playerName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 347,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 346,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: parse.spec\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: /*#__PURE__*/_jsxDEV(Badge, {\n                        variant: getPercentileBadgeVariant(parse.percentile),\n                        children: parse.percentile\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 353,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-4 bg-muted rounded text-center\",\n                children: \"No parse data found for this fight.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this)\n          }, fightName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this), playerAverages.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Player Average Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: \"Average parse percentiles across all fights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Rank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Player\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Class/Spec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Avg. Percentile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n                children: \"Fights\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: playerAverages.map((player, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: getClassColor(player.class)\n                  },\n                  children: player.playerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [player.spec, \" \", player.class]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Badge, {\n                  variant: getPercentileBadgeVariant(player.averagePercentile),\n                  children: player.averagePercentile\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: player.totalParses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 21\n              }, this)]\n            }, player.playerName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(WarcraftLogsReport, \"7ylP8gNve1zo2Pe8KZLiSrG5Y4k=\");\n_c = WarcraftLogsReport;\nexport default WarcraftLogsReport;\nvar _c;\n$RefreshReg$(_c, \"WarcraftLogsReport\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","CardHeader","CardTitle","CardDescription","Input","Button","Table","TableBody","TableCaption","TableCell","TableHead","TableHeader","TableRow","Alert","AlertDescription","AlertTitle","Badge","Tabs","TabsContent","TabsList","TabsTrigger","Separator","Skeleton","jsxDEV","_jsxDEV","WarcraftLogsReport","_s","reportCode","setReportCode","apiKey","loading","setLoading","error","setError","players","setPlayers","fightParses","setFightParses","selectedFight","setSelectedFight","reportTitle","setReportTitle","targetZone","setTargetZone","fetchReport","reportUrl","reportResponse","fetch","ok","Error","status","reportJson","json","title","raidFights","fights","filter","fight","zoneName","boss","exportedPlayers","exportedCharacters","length","enhancedPlayers","map","player","_friendly$icon","friendly","friendlies","find","f","name","server","class","type","spec","icon","split","fetchParsesForPlayer","region","url","res","data","parse","playerName","allPlayersParsesArrays","Promise","all","allParses","flat","fightPlayerParses","forEach","fightId","id","matchingParses","reportID","fightID","playerParseObjects","percentile","Math","floor","sort","a","b","parses","fightDetails","fightNames","Object","keys","err","message","getClassColor","className","classColors","getPercentileBadgeVariant","formatTime","timeInMs","isNaN","seconds","minutes","remainingSeconds","toString","padStart","calculatePlayerAverages","playerParses","values","push","playerAverages","average","reduce","sum","val","averagePercentile","round","totalParses","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","variant","style","borderLeft","defaultValue","onValueChange","fightName","end","start","kill","index","color","_c","$RefreshReg$"],"sources":["C:/Users/gonza/Desktop/WarcraftLog Parser/warcraft-logs-viewer/Warcraft-Parse-Analyzer/src/WarcraftLogsReport.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle, \r\n  CardDescription \r\n} from './components/ui/card';\r\nimport { Input } from './components/ui/input';\r\nimport { Button } from './components/ui/button';\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCaption, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from './components/ui/table';\r\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\r\nimport { Badge } from './components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\r\nimport { Separator } from './components/ui/separator';\r\nimport { Skeleton } from './components/ui/skeleton';\r\n\r\nconst WarcraftLogsReport = () => {\r\n  const [reportCode, setReportCode] = useState('GNyJ29dVMhBTRnY3');\r\n  const apiKey = '122f2d0f15365c7c36b5b04fe99800e7';\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [fightParses, setFightParses] = useState({});\r\n  const [selectedFight, setSelectedFight] = useState(null);\r\n  const [reportTitle, setReportTitle] = useState('');\r\n  const [targetZone, setTargetZone] = useState('Liberation of Undermine');\r\n\r\n  const fetchReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Fetch report data\r\n      const reportUrl = `https://www.warcraftlogs.com/v1/report/fights/${reportCode}?api_key=${apiKey}`;\r\n      const reportResponse = await fetch(reportUrl);\r\n      \r\n      if (!reportResponse.ok) {\r\n        throw new Error(`HTTP error while fetching report: ${reportResponse.status}`);\r\n      }\r\n      \r\n      const reportJson = await reportResponse.json();\r\n      setReportTitle(reportJson.title || 'Warcraft Logs Report');\r\n      \r\n      // Filter fights to only include those from the target zone\r\n      const raidFights = reportJson.fights.filter(fight => \r\n        fight.zoneName === targetZone && fight.boss !== 0\r\n      );\r\n      \r\n      // Get players from exported characters with additional class information\r\n      const exportedPlayers = reportJson.exportedCharacters || [];\r\n      \r\n      if (exportedPlayers.length === 0) {\r\n        throw new Error(\"No players found in exportedCharacters.\");\r\n      }\r\n      \r\n      // Enhance player data with class information from friendlies if available\r\n      const enhancedPlayers = exportedPlayers.map(player => {\r\n        const friendly = (reportJson.friendlies || []).find(f => \r\n          f.name === player.name && f.server === player.server\r\n        );\r\n        \r\n        return {\r\n          ...player,\r\n          class: friendly?.type || null,\r\n          spec: friendly?.icon?.split('-')[1] || null\r\n        };\r\n      });\r\n      \r\n      setPlayers(enhancedPlayers);\r\n      \r\n      // Fetch parses for all players\r\n      const fetchParsesForPlayer = async (player) => {\r\n        const { name, server, region } = player;\r\n        const url = `https://www.warcraftlogs.com/v1/parses/character/${name}/${server}/${region}?api_key=${apiKey}`;\r\n        const res = await fetch(url);\r\n        \r\n        if (!res.ok) {\r\n          throw new Error(`HTTP error for ${name}: ${res.status}`);\r\n        }\r\n        \r\n        const data = await res.json();\r\n        return data.map(parse => ({ ...parse, playerName: name }));\r\n      };\r\n      \r\n      const allPlayersParsesArrays = await Promise.all(enhancedPlayers.map(fetchParsesForPlayer));\r\n      const allParses = allPlayersParsesArrays.flat();\r\n      \r\n      // Group parses by fight\r\n      const fightPlayerParses = {};\r\n      (reportJson.fights || []).forEach(fight => {\r\n        if (fight.boss && fight.boss !== 0 && fight.zoneName === targetZone) {\r\n          const fightId = fight.id;\r\n          const matchingParses = allParses.filter(parse =>\r\n            parse.reportID === reportCode && parse.fightID === fightId\r\n          );\r\n          \r\n          const playerParseObjects = matchingParses.map(parse => ({\r\n            playerName: parse.playerName,\r\n            percentile: Math.floor(parse.percentile || 0),\r\n            spec: parse.spec,\r\n            class: parse.class\r\n          }));\r\n          \r\n          playerParseObjects.sort((a, b) => b.percentile - a.percentile);\r\n          fightPlayerParses[fight.name || `Fight ${fightId}`] = {\r\n            parses: playerParseObjects,\r\n            fightId: fightId,\r\n            fightDetails: fight\r\n          };\r\n        }\r\n      });\r\n      \r\n      setFightParses(fightPlayerParses);\r\n      \r\n      // Set the first fight as selected by default if there are fights\r\n      const fightNames = Object.keys(fightPlayerParses);\r\n      if (fightNames.length > 0) {\r\n        setSelectedFight(fightNames[0]);\r\n      }\r\n      \r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get class color\r\n  const getClassColor = (className) => {\r\n    const classColors = {\r\n      'DeathKnight': '#C41E3A',\r\n      'DemonHunter': '#A330C9',\r\n      'Druid': '#FF7C0A',\r\n      'Hunter': '#AAD372',\r\n      'Mage': '#3FC7EB',\r\n      'Monk': '#00FF98',\r\n      'Paladin': '#F48CBA',\r\n      'Priest': '#FFFFFF',\r\n      'Rogue': '#FFF468',\r\n      'Shaman': '#0070DD',\r\n      'Warlock': '#8788EE',\r\n      'Warrior': '#C69B6D',\r\n      'Evoker': '#33937F',\r\n      'NPC': '#999999',\r\n      'Pet': '#999999'\r\n    };\r\n    \r\n    return classColors[className] || '#888888';\r\n  };\r\n\r\n  // Get percentile badge variant\r\n  const getPercentileBadgeVariant = (percentile) => {\r\n    if (percentile >= 95) return 'destructive'; // Legendary\r\n    if (percentile >= 75) return 'outline';     // Epic\r\n    if (percentile >= 50) return 'secondary';   // Rare\r\n    if (percentile >= 25) return 'default';     // Uncommon\r\n    return 'secondary';                         // Common\r\n  };\r\n\r\n  // Format time in seconds to MM:SS\r\n  const formatTime = (timeInMs) => {\r\n    if (!timeInMs || isNaN(timeInMs)) return '00:00';\r\n    \r\n    const seconds = Math.floor(timeInMs / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Calculate player averages across all fights\r\n  const calculatePlayerAverages = () => {\r\n    if (Object.keys(fightParses).length === 0) return [];\r\n    \r\n    // Collect all parse entries for each player\r\n    const playerParses = {};\r\n    \r\n    Object.values(fightParses).forEach(fight => {\r\n      fight.parses.forEach(parse => {\r\n        if (!playerParses[parse.playerName]) {\r\n          playerParses[parse.playerName] = {\r\n            playerName: parse.playerName,\r\n            class: parse.class,\r\n            spec: parse.spec, // Will use the most recent spec\r\n            parses: []\r\n          };\r\n        }\r\n        \r\n        playerParses[parse.playerName].parses.push(parse.percentile);\r\n      });\r\n    });\r\n    \r\n    // Calculate averages for each player\r\n    const playerAverages = Object.values(playerParses).map(player => {\r\n      const average = player.parses.reduce((sum, val) => sum + val, 0) / player.parses.length;\r\n      return {\r\n        ...player,\r\n        averagePercentile: Math.round(average),\r\n        totalParses: player.parses.length\r\n      };\r\n    });\r\n    \r\n    // Sort by average percentile (highest first)\r\n    return playerAverages.sort((a, b) => b.averagePercentile - a.averagePercentile);\r\n  };\r\n\r\n  const playerAverages = calculatePlayerAverages();\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4 max-w-4xl\">\r\n      <Card className=\"mb-6\">\r\n        <CardHeader>\r\n          <CardTitle>Warcraft Logs Report Viewer</CardTitle>\r\n          <CardDescription>Enter your report code to view player performance in {targetZone}</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2\">\r\n            <Input\r\n              value={reportCode}\r\n              onChange={(e) => setReportCode(e.target.value)}\r\n              placeholder=\"Report Code\"\r\n              className=\"sm:flex-1\"\r\n            />\r\n            <Button onClick={fetchReport} disabled={loading}>\r\n              {loading ? 'Loading...' : 'Fetch Report Data'}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      \r\n      {error && (\r\n        <Alert variant=\"destructive\" className=\"mb-6\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          <AlertDescription>{error}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n      \r\n      {loading && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>Loading Data</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {reportTitle && players.length > 0 && !loading && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>{reportTitle}</CardTitle>\r\n            <CardDescription>Raid Composition ({players.length} players)</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\r\n              {players.map(player => (\r\n                <div \r\n                  key={player.id} \r\n                  className=\"p-2 bg-muted rounded flex flex-col\"\r\n                  style={{ borderLeft: `4px solid ${getClassColor(player.class || 'Unknown')}` }}\r\n                >\r\n                  <div className=\"font-medium\">{player.name}</div>\r\n                  {player.class && (\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {player.spec} {player.class}\r\n                    </div>\r\n                  )}\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {player.server} ({player.region})\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {Object.keys(fightParses).length > 0 && (\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>{targetZone} Boss Fights</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Tabs defaultValue={selectedFight} onValueChange={setSelectedFight}>\r\n              <TabsList className=\"mb-4 flex flex-wrap h-auto\">\r\n                {Object.keys(fightParses).map(fightName => (\r\n                  <TabsTrigger key={fightName} value={fightName} className=\"mb-1\">\r\n                    {fightName}\r\n                  </TabsTrigger>\r\n                ))}\r\n              </TabsList>\r\n              \r\n              {Object.keys(fightParses).map(fightName => (\r\n                <TabsContent key={fightName} value={fightName}>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between flex-wrap\">\r\n                      <h3 className=\"text-lg font-bold\">{fightName} Performance</h3>\r\n                      {fightParses[fightName].fightDetails && (\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          <span>Fight ID: {fightParses[fightName].fightId}</span>\r\n                          <span className=\"ml-4\">\r\n                            Duration: {formatTime(\r\n                              fightParses[fightName].fightDetails.end - \r\n                              fightParses[fightName].fightDetails.start\r\n                            )}\r\n                            {fightParses[fightName].fightDetails.kill && \r\n                              <Badge variant=\"outline\" className=\"ml-2 bg-green-500/10\">Kill</Badge>\r\n                            }\r\n                            {!fightParses[fightName].fightDetails.kill && \r\n                              <Badge variant=\"outline\" className=\"ml-2 bg-red-500/10\">Wipe</Badge>\r\n                            }\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <Separator />\r\n                    \r\n                    {fightParses[fightName].parses.length > 0 ? (\r\n                      <Table>\r\n                        <TableHeader>\r\n                          <TableRow>\r\n                            <TableHead>Rank</TableHead>\r\n                            <TableHead>Player</TableHead>\r\n                            <TableHead>Spec</TableHead>\r\n                            <TableHead>Percentile</TableHead>\r\n                          </TableRow>\r\n                        </TableHeader>\r\n                        <TableBody>\r\n                          {fightParses[fightName].parses.map((parse, index) => (\r\n                            <TableRow key={index}>\r\n                              <TableCell>{index + 1}</TableCell>\r\n                              <TableCell>\r\n                                <span style={{ color: getClassColor(parse.class) }}>\r\n                                  {parse.playerName}\r\n                                </span>\r\n                              </TableCell>\r\n                              <TableCell>{parse.spec}</TableCell>\r\n                              <TableCell>\r\n                                <Badge variant={getPercentileBadgeVariant(parse.percentile)}>\r\n                                  {parse.percentile}\r\n                                </Badge>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    ) : (\r\n                      <div className=\"p-4 bg-muted rounded text-center\">\r\n                        No parse data found for this fight.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </TabsContent>\r\n              ))}\r\n            </Tabs>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      \r\n      {playerAverages.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Player Average Performance</CardTitle>\r\n            <CardDescription>Average parse percentiles across all fights</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Rank</TableHead>\r\n                  <TableHead>Player</TableHead>\r\n                  <TableHead>Class/Spec</TableHead>\r\n                  <TableHead>Avg. Percentile</TableHead>\r\n                  <TableHead>Fights</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {playerAverages.map((player, index) => (\r\n                  <TableRow key={player.playerName}>\r\n                    <TableCell>{index + 1}</TableCell>\r\n                    <TableCell>\r\n                      <span style={{ color: getClassColor(player.class) }}>\r\n                        {player.playerName}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>{player.spec} {player.class}</TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={getPercentileBadgeVariant(player.averagePercentile)}>\r\n                        {player.averagePercentile}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>{player.totalParses}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WarcraftLogsReport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}